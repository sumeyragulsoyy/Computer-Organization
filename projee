		.data
	#heap: .space 400
	Switch:   .word L1,L2,L3,L4
	Empty: .asciiz "Heap is Empty"
	valueOf:  .asciiz "The value of "
	isPlaced: .asciiz "is placed at location "
	ofTheHeap: .asciiz " of the heap array"
	sizeOf: .asciiz "The size of heap is "
	deleteFrom: .asciiz " is deleted from the heap!"
	MenuQ1:   .word H_INSERT,H_DELETE,H_PRINT,RETURNMAINMENU
	Welcome: .asciiz "Welcome to Project \n"
	MainMenu: .asciiz "\n Main Menu:\n  1.Build a min-heap\n  2.Evaulate an expression\n  3.Construct a 2D array\n  4.Exit\n  Please Select an Option: "
	Q1:       .asciiz "1. Insert an item to the heap\n 2. Delete an item from the heap\n 3. Print the heap\n 4. Return back\n  Please select an option: "
	Q2: .asciiz "String Evaulate"
	Q3: .asciiz "Array Create"
	END: .asciiz "Program ends. Bye :)"
		.text
		.globl main
main:  li,$v0,4 #print String
	   la,$a0,Welcome
	   syscall
	   
MAINLOOP:  li $v0,4
		   la $a0,MainMenu
		   syscall
	       li $v0,5 #read integer
	       syscall
	       addi $t1,$v0,-1 
	       sll,$t2,$t1,2
	       la $t0,Switch
	       add $t3,$t2,$t0
	       lw $t4,0($t3)
	       jr $t4
#Q1 döngüsünü kurmamız lazım	   
L1: li $v0,4    #print options of Q1
	la $a0,Q1
	syscall
	#li $v0,5 #read integer
	#syscall
	j MAINLOOP
#H_INSERT:  la $s0,heap   #s0=&heap
		  # lw $t3,0($s0)  #heap[0]=heapsize
		   #addi $t0,$t3,1 
		   #sw $t0,0($s0)   #heap[0]=heapsize+1
		   #sll $t1,$t0,2   #i*4
		   #add $t1,$s0,$t1  #&[heap+i]=&heap+i*4
		   #sw $a0,0($t1)    
		  # addi $s3,$s3,1 
		  # beq $t0,$s3,L1
#CONTROL:   srl $t5,$t3,1  #t3=heapsize
		  # beq $t5,$0,L1  #t5=heapsize/2
		  # sll $t3,$t3,2  #t3=t3*4
		 #  sll $t5,$t5,2   #t5=t5*4
		 #  add $t3,$t3,$s0  #t3=&heap+i*4
		 #  add $t5,$t5,$s0  
		  # lw $t6,0($t3)   #t6=child
		  # lw $t7,0($t5)   #t7=root
		  # slt $t8,$t6,$t7  #child<root
		  # beq $t8,$0,Else1  
		  # sw $t7,0($t3)   #heap[child]=root
		  # sw $t6,0($t5)   #heap[root]=child
		  # srl $t9,$t9,1    #t9=heap/2
		  # add $t3,$t9,$0   #t3=t9
		  # j CONTROL
#Else1:	   srl $t9,$t9,1
		  # add $t3,$t9,$0
		  # j CONTROL

#H_DELETE:  la $s0,heap  #s0=&heap
		  # lw $t0,0($s0)  #t0=heap[0]=heapsize
		  # addi $t1,$t1,1  #t1 always 1
		  # slt $t2,$t0,$t1
		  # beq $t1,$t2,PrintEmpty  #If heap is empty dont delete operation
#COME:	   beq $t0,$0,L1        
		  # lw $t3,4($s0)  #t3=heap[1]
		  # add $a0,$t3,$0  #a0=t3
		  # li $v0,1        
		 #  syscall
		 #  addi $t7,$t7,1
#SetMinHeap: sll $t6,$t7,1  #t6=t7*2 
			#slt $t4,$t6,$t0 #t6<heapsize
			#sub $t5,$t0,$t6  #t6=heapsize
			#or $t5,$t4,$t5
			#beq $t1,$0,L1
			#sub $s1,$t0,$t6
			#slt $s2,$s1,$t1
			#addi $t8,$t6,1
			#sll $t9,$t6,2  #child*4
			#sll $t8,$t8,2  #(child+1)*4
			#add $t9,$t9,$s0
			#add $t8,$t8,$s0
			#lw $s3,0($t9) #s3=heap[child]
			#lw $s4,0($t8) #s4=heap[child+1]
			#slt $s5,$s4,$s3
			#and $s5,$s2,$s5
			#beq $s5,$t1,childPlus
#backk:		sll $s6,$t7,2 
			#add $s6,$s0,$s6 #&heap[now]
			#lw $s7,0($s6)    #heap[now]
			#slt $s8,$s3,$s7  
			#beq $s8,$0,GoFor
			#sw $s3,0($s6)
			#sw $s7,0($t9)
			#add $t7,$t6,$0
			#j SetMinHeap




#GoFor:     add $t7,$t6,$0
#		   j SetMinHeap
#childPlus: addi $t6,$t6,1
#		   j backk

#PrintEmpty:               #addi $sp,$sp,-4
			              #sw $ra,0($sp)
#			li $v0,4
#			la $a0,Empty
#			syscall
#			j COME              #lw $ra,0($sp)
			              #addi $sp,$sp,4
			              #jr $ra # geldiği yere geri dödürmeye çalışıyorum

#H_PRINT:

#RETURNMAINMENU:

#Q2 	
L2: li $v0,4
	la $a0,Q2
	syscall
	j MAINLOOP	
#Q3	
L3: li $v0,4
	la $a0,Q3
	syscall
	j MAINLOOP	
#END Program	
L4:li $v0,4
	la $a0,END
	syscall
	j EXIT	
	
EXIT:li $v0,10
	 syscall

	   
